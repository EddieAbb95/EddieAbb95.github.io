<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on Eddie Abbondanzio</title>
    <link>https://eddieabbondanz.io/categories/typescript/</link>
    <description>Recent content in TypeScript on Eddie Abbondanzio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019. All rights reserved.</copyright>
    <lastBuildDate>Sun, 15 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://eddieabbondanz.io/categories/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TypeScript - Await Promise.All() And Get The Results</title>
      <link>https://eddieabbondanz.io/post/typescript/await-promise-all/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/typescript/await-promise-all/</guid>
      <description>I&amp;rsquo;m a big fan of the async await syntax in ES2017. In my opionion it just feels a lot more natural than and then and then and then&amp;hellip;. I digress. I&amp;rsquo;ll keep this one short.</description>
    </item>
    
    <item>
      <title>TypeScript - Interpolated Strings</title>
      <link>https://eddieabbondanz.io/post/typescript/interpolated-strings/</link>
      <pubDate>Fri, 01 Feb 2019 16:52:42 -0400</pubDate>
      
      <guid>https://eddieabbondanz.io/post/typescript/interpolated-strings/</guid>
      <description>Coming from the .NET world String.Format() was by far my most used function for generating user readable error / log messages. After jumping over to TypeScript, I was bummed to learn that no similar function existed.</description>
    </item>
    
    <item>
      <title>TypeScript - Events</title>
      <link>https://eddieabbondanz.io/post/typescript/events/</link>
      <pubDate>Mon, 21 Jan 2019 18:37:24 -0400</pubDate>
      
      <guid>https://eddieabbondanz.io/post/typescript/events/</guid>
      <description>Intro If you were expecting a phone call from a friend, you (hopefully) wouldn&amp;rsquo;t sit by the phone and continuously pick it up to see if your friend was on the other end.</description>
    </item>
    
    <item>
      <title>TypeScript - Taking The Magic Out of Magic Strings</title>
      <link>https://eddieabbondanz.io/post/typescript/magic-strings/</link>
      <pubDate>Sat, 05 Jan 2019 09:53:42 -0400</pubDate>
      
      <guid>https://eddieabbondanz.io/post/typescript/magic-strings/</guid>
      <description>What&amp;rsquo;s so Magical About Magic Strings? Magic strings are string literals strewn about a code base that apply some kind of limitation to the code. They can be used to filter valid input, constrain parameters, or control the behavior of code.</description>
    </item>
    
    <item>
      <title>TypeScript - How To Set Up A New Project</title>
      <link>https://eddieabbondanz.io/post/typescript/setting-up-a-typescript-project/</link>
      <pubDate>Mon, 26 Nov 2018 06:57:42 -0400</pubDate>
      
      <guid>https://eddieabbondanz.io/post/typescript/setting-up-a-typescript-project/</guid>
      <description>Summary For beginners TypeScript is like the carrot on the end of the stick, always just out of reach no matter how hard you try. Everyone touts how it&amp;rsquo;s &amp;ldquo;JavaScript that scales&amp;rdquo;, and once you use it you&amp;rsquo;ll never go back.</description>
    </item>
    
  </channel>
</rss>
