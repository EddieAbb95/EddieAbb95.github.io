<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on Eddie Abbondanzio</title>
    <link>https://EddieAbb95.github.io/categories/unity/</link>
    <description>Recent content in Unity on Eddie Abbondanzio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Mar 2018 10:06:59 -0400</lastBuildDate>
    
	<atom:link href="https://EddieAbb95.github.io/categories/unity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Object Pooling in Unity</title>
      <link>https://EddieAbb95.github.io/post/unity/object-pool/</link>
      <pubDate>Fri, 30 Mar 2018 10:06:59 -0400</pubDate>
      
      <guid>https://EddieAbb95.github.io/post/unity/object-pool/</guid>
      <description>GameObject.Instantiate() is Expensive Creating new gameobjects during runtime can be a costly operation. Multiple this action by 10 or more times in a single frame and you&amp;rsquo;ll notice a slight hiccup in FPS. One option to counter this is by taking advantage of object pooling. Object pooling is when a collection of inactive gameobjects is kept on standby. When the game needs a new object it can call upon the pool to let it use one of the objects in it.</description>
    </item>
    
  </channel>
</rss>