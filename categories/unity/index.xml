<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unity on Eddie Abbondanzio</title>
    <link>https://eddieabbondanz.io/categories/unity/</link>
    <description>Recent content in Unity on Eddie Abbondanzio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2019. All rights reserved.</copyright>
    <lastBuildDate>Wed, 13 Nov 2019 06:10:00 +0000</lastBuildDate>
    
	<atom:link href="https://eddieabbondanz.io/categories/unity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unity - How to Create a Basic Server / Client With LiteNetLib</title>
      <link>https://eddieabbondanz.io/post/unity/litenetlib-basic-server-client/</link>
      <pubDate>Wed, 13 Nov 2019 06:10:00 +0000</pubDate>
      
      <guid>https://eddieabbondanz.io/post/unity/litenetlib-basic-server-client/</guid>
      <description>LiteNetLib already provides a good example for creating a basic server / client set up in their documents, but if we want to use it with Unity there&amp;rsquo;s a few extra steps we&amp;rsquo;ll need to take. This article intends to cover the missing steps, and assume you already have LiteNetLib added to your Unity project. If you need guidance on adding LiteNetLib check out: How to Setup LiteNetLib With Unity</description>
    </item>
    
    <item>
      <title>Unity - How to Set Up LiteNetLib</title>
      <link>https://eddieabbondanz.io/post/unity/litenetlib-setup/</link>
      <pubDate>Tue, 12 Nov 2019 21:01:01 -0400</pubDate>
      
      <guid>https://eddieabbondanz.io/post/unity/litenetlib-setup/</guid>
      <description>TL;DR Download the most recent stable release source code zip and copy the /LiteNetLib folder to the Plugins folder in your Unity project.
 LiteNetLib is an UDP networking library that can be used for building multiplayer games with Unity. If you have any experience working with Lidgren you&amp;rsquo;ll feel right at home with LiteNetLib. LiteNetLib is not Unity specific, but it&amp;rsquo;s a popular choice.
Create a Plugins Folder Open up your Unity project.</description>
    </item>
    
    <item>
      <title>Logging to Unity or Console</title>
      <link>https://eddieabbondanz.io/post/unity/debug-logging/</link>
      <pubDate>Sat, 31 Mar 2018 15:56:01 -0400</pubDate>
      
      <guid>https://eddieabbondanz.io/post/unity/debug-logging/</guid>
      <description>Sometimes we want code that can run outside of Unity And that can make things tricky when it comes to writing text to console. Unity has it&amp;rsquo;s own set of methods for writing to it&amp;rsquo;s command console via the Debug class with the most commonly used one being Debug.Log(). However in the event you want to create a library of code that can be run within Unity or in the command console (say a game server for example) you&amp;rsquo;ll need a way to differentiate between the running environments.</description>
    </item>
    
    <item>
      <title>Object Pooling in Unity</title>
      <link>https://eddieabbondanz.io/post/unity/object-pool/</link>
      <pubDate>Fri, 30 Mar 2018 10:06:59 -0400</pubDate>
      
      <guid>https://eddieabbondanz.io/post/unity/object-pool/</guid>
      <description>GameObject.Instantiate() is Expensive Creating new gameobjects during runtime can be a costly operation. Multiple this action by 10 or more times in a single frame and you&amp;rsquo;ll notice a slight hiccup in FPS. One option to counter this is by taking advantage of object pooling. Object pooling is when a collection of inactive gameobjects is kept on standby. When the game needs a new object it can call upon the pool to retrieve an already instantiated instance.</description>
    </item>
    
  </channel>
</rss>